package com.myapp;

import java.util.Arrays;
import java.util.HashMap;

import software.amazon.awscdk.core.Construct;
import software.amazon.awscdk.core.Duration;
import software.amazon.awscdk.core.RemovalPolicy;
import software.amazon.awscdk.services.lambda.Code;
import software.amazon.awscdk.services.lambda.Function;
import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;
import software.amazon.awscdk.services.lambda.Runtime;
import software.amazon.awscdk.services.s3.BlockPublicAccess;
import software.amazon.awscdk.services.s3.Bucket;
import software.amazon.awscdk.services.sqs.Queue;

public class BackendService extends Construct {
    public final Bucket bucket;
    public final Queue queue;
    public final Function function;

    @SuppressWarnings("serial")
    public BackendService(final Construct scope, final String id) {
        super(scope, id);

        // bucket name is generated by CDK to be a unique name
        bucket = Bucket.Builder.create(this, "backend-bucket-storage")
            .blockPublicAccess(BlockPublicAccess.BLOCK_ALL)
            .versioned(false)
            .removalPolicy(RemovalPolicy.DESTROY)
            .build();

        queue = Queue.Builder.create(this, "backend-queue")
            .retentionPeriod(Duration.seconds(60))
            .build();

        function = Function.Builder.create(this, "backend-function")
            .description("backend lambda to process request and generate something")
            .handler("com.myapp.BackendHandler::handleRequest")
            .runtime(Runtime.JAVA_8)
            .timeout(Duration.seconds(10))
            .code(Code.fromAsset("../backend/target/backend-0.1.jar"))
            .events(Arrays.asList(
                SqsEventSource.Builder.create(queue)
                    .batchSize(1)
                    .build()
            ))
            .environment(new HashMap<String, String>() {
                {put("BUCKET_NAME", bucket.getBucketName());}
            })
            .build();

        bucket.grantReadWrite(function);
    }

    public String targetQueue() {
        return this.queue.getQueueUrl();
    }

}
